Index: src/main/java/com/example/myjavafxapp/util/DictionaryManagement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myjavafxapp.util;\r\n\r\nimport com.example.myjavafxapp.model.Dictionary;\r\nimport com.example.myjavafxapp.model.Word;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.charset.Charset;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class DictionaryManagement {\r\n    private static Dictionary dictionary = new Dictionary();\r\n\r\n    public DictionaryManagement() {\r\n        dictionary = new Dictionary();\r\n    }\r\n\r\n    public Dictionary getDictionary() {\r\n        return dictionary;\r\n    }\r\n\r\n    // Hàm thêm từ mới từ commandline\r\n    public void insertFromCommandLine() {\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        System.out.print(\"Enter the number of words: \");\r\n        int n = scanner.nextInt();\r\n        scanner.nextLine(); // Consume the newline character\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            System.out.print(\"Enter word in English: \");\r\n            String word_target = scanner.nextLine();\r\n\r\n            System.out.print(\"Enter sound in English: \");\r\n            String word_sound = scanner.nextLine();\r\n\r\n            System.out.print(\"Enter Vietnamese meaning: \");\r\n            String word_explain = scanner.nextLine();\r\n\r\n            Word word = new Word(word_target, word_explain, word_sound);\r\n            dictionary.addWord(word);\r\n        }\r\n    }\r\n\r\n    // Hàm xóa từ\r\n    public static boolean removeWord(String wordToRemove) {\r\n        ArrayList<Word> words = dictionary.getAllWords();\r\n\r\n        for (Word word : words) {\r\n            if (word.getWordTarget().equalsIgnoreCase(wordToRemove)) {\r\n                words.remove(word);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false; // Trả về false nếu từ không tìm thấy\r\n    }\r\n\r\n    // Hàm cập nhật từ\r\n    public static boolean updateWord(String wordToUpdate, String newWordSound, String newDefinition) {\r\n        ArrayList<Word> words = dictionary.getAllWords();\r\n\r\n        for (Word word : words) {\r\n            if (word.getWordTarget().equalsIgnoreCase(wordToUpdate)) {\r\n                word.setWordSound(newWordSound);\r\n                word.setWordExplain(newDefinition);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false; // Trả về false nếu từ không tìm thấy\r\n    }\r\n\r\n    // Hàm thêm từ\r\n    public static boolean addWord(String wordToAdd, String newWordSound, String newDefinition) {\r\n        ArrayList<Word> words = dictionary.getAllWords();\r\n        for (Word word : words)\r\n            if (word.getWordTarget().equalsIgnoreCase(wordToAdd)) {\r\n                return false;\r\n            }\r\n        Word word = new Word(wordToAdd, newDefinition, newWordSound);\r\n        words.add(word);\r\n        return true;\r\n\r\n    }\r\n\r\n    // Hàm tra từ\r\n    public static Word dictionaryLookup(String wordToLookup) {\r\n        ArrayList<Word> words = dictionary.getAllWords();\r\n\r\n        for (Word word : words) {\r\n            if (word.getWordTarget().equalsIgnoreCase(wordToLookup)) {\r\n                return word; // Trả về đối tượng Word nếu từ được tìm thấy\r\n            }\r\n        }\r\n\r\n        return null; // Trả về null nếu từ không tìm thấy\r\n    }\r\n\r\n    // Hàm tìm kiếm từ\r\n    public static ArrayList<Word> searchWords(String prefix) {\r\n        ArrayList<Word> words = dictionary.getAllWords();\r\n        ArrayList<Word> matchingWords = new ArrayList<>();\r\n\r\n        for (Word word : words) {\r\n            if (word.getWordTarget().startsWith(prefix)) {\r\n                matchingWords.add(word);\r\n            }\r\n        }\r\n        return matchingWords;\r\n    }\r\n\r\n    public static void insertFromFile(String path) {\r\n\r\n        byte[] encoded = new byte[0];\r\n        try {\r\n            encoded = Files.readAllBytes(Paths.get(path));\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        String textFromFile = new String(encoded, Charset.defaultCharset());\r\n        String[] words = textFromFile.split(\"@\");\r\n        for (String word : words) {\r\n            String[] result = word.split(\"\\r?\\n\", 2);\r\n            if (result.length > 1) {\r\n                String wordExplain = new String();\r\n                String wordTarget = new String();\r\n                String wordSound = new String();\r\n                if (result[0].contains(\"/\")) {\r\n                    String firstMeaning = result[0].substring(0, result[0].indexOf(\"/\"));\r\n                    String lastSoundMeaning = result[0].substring(result[0].indexOf(\"/\"), result[0].length());\r\n                    wordTarget = firstMeaning;\r\n                    wordSound = lastSoundMeaning;\r\n                } else {\r\n                    wordTarget = result[0];\r\n                    wordSound = \"\";\r\n                }\r\n                wordExplain = result[1];\r\n                dictionary.addWord(new Word(wordTarget.trim(), wordExplain.trim(), wordSound.trim()));\r\n            }\r\n        }\r\n    }\r\n\r\n//     // Hàm nhập từ tệp\r\n//    public void insertFromFile(String filePath) {\r\n//        try (Scanner fileScanner = new Scanner(new File(filePath))) {\r\n//            while (fileScanner.hasNextLine()) {\r\n//                String line = fileScanner.nextLine();\r\n//                String[] parts = line.split(\"\\t\\t\"); // Giả sử từ và nghĩa được phân tách bằng 2 dấu tab\r\n//                if (parts.length == 2) {\r\n//                    Word word = new Word(parts[0], parts[1]);\r\n//                    dictionary.addWord(word);\r\n//                }\r\n//            }\r\n//            System.out.println(\"Import successful!\");\r\n//        } catch (FileNotFoundException e) {\r\n//            System.out.println(\"File not found.\");\r\n//        }\r\n//    }\r\n\r\n\r\n//     // Hàm nhập từ tệp\r\n//    public void insertFromFile(String filePath) {\r\n//        try (Scanner fileScanner = new Scanner(new File(filePath))) {\r\n//            while (fileScanner.hasNextLine()) {\r\n//                String line = fileScanner.nextLine();\r\n//                String[] parts = line.split(\"\\t\\t\"); // Giả sử từ và nghĩa được phân tách bằng 2 dấu tab\r\n//                if (parts.length == 2) {\r\n//                    Word word = new Word(parts[0], parts[1]);\r\n//                    dictionary.addWord(word);\r\n//                }\r\n//            }\r\n//            System.out.println(\"Import successful!\");\r\n//        } catch (FileNotFoundException e) {\r\n//            System.out.println(\"File not found.\");\r\n//        }\r\n//    }\r\n\r\n\r\n    public static void exportToFile(String path) {\r\n        StringBuilder content = new StringBuilder();\r\n        ArrayList<Word> words = dictionary.getAllWords();\r\n        for (Word word : words) {\r\n            String wordTarget = word.getWordTarget();\r\n            String wordExplain = word.getWordExplain();\r\n            String wordSound = word.getWordSound();\r\n\r\n            // Append \"@\" to separate wordTarget and wordExplain\r\n            content.append(\"@\");\r\n\r\n            // Append wordTarget\r\n            content.append(wordTarget).append(\" \");\r\n\r\n            // If wordSound is not empty\r\n            if (!wordSound.isEmpty()) {\r\n                content.append(wordSound).append(\"\\n\");\r\n            }\r\n\r\n            // Append wordExplain\r\n            content.append(wordExplain);\r\n\r\n            // Append newline to separate entries\r\n            content.append(\"\\n\");\r\n        }\r\n\r\n        // Convert StringBuilder to byte array and write to file\r\n        try {\r\n            Files.write(Paths.get(path), content.toString().getBytes(Charset.defaultCharset()));\r\n            System.out.println(\"Export successful!\");\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"Error exporting to file: \" + e.getMessage(), e);\r\n        }\r\n    }\r\n\r\n\r\n//    // Hàm xuất ra tệp\r\n//    public void dictionaryExportToFile(String filePath) {\r\n//        try (PrintWriter writer = new PrintWriter(filePath)) {\r\n//            ArrayList<Word> words = dictionary.getAllWords();\r\n//            for (Word word : words) {\r\n//                writer.println(word.getWordTarget() + \"\\t\" + word.getWordExplain());\r\n//            }\r\n//            System.out.println(\"Export successful!\");\r\n//        } catch (FileNotFoundException e) {\r\n//            System.out.println(\"Error exporting to file.\");\r\n//        }\r\n//\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/myjavafxapp/util/DictionaryManagement.java b/src/main/java/com/example/myjavafxapp/util/DictionaryManagement.java
--- a/src/main/java/com/example/myjavafxapp/util/DictionaryManagement.java	
+++ b/src/main/java/com/example/myjavafxapp/util/DictionaryManagement.java	
@@ -207,6 +207,7 @@
 
         // Convert StringBuilder to byte array and write to file
         try {
+            Files.delete(Paths.get(path));
             Files.write(Paths.get(path), content.toString().getBytes(Charset.defaultCharset()));
             System.out.println("Export successful!");
         } catch (IOException e) {
Index: src/main/java/com/example/myjavafxapp/controller/WordGameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myjavafxapp.controller;\r\n\r\nimport com.example.myjavafxapp.model.Word;\r\nimport com.example.myjavafxapp.model.WordGame;\r\nimport com.example.myjavafxapp.util.DictionaryManagement;\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.Timeline;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\nimport java.util.List;\r\n\r\npublic class WordGameController extends DictionaryController{\r\n\r\n    @FXML\r\n    private RadioButton optionA;\r\n    @FXML\r\n    private RadioButton optionB;\r\n    @FXML\r\n    private RadioButton optionC;\r\n    @FXML\r\n    private RadioButton optionD;\r\n    @FXML\r\n    private ToggleGroup answerToggleGroup;\r\n\r\n    @FXML\r\n    private Label wordLabel;\r\n    @FXML\r\n    private TextField answerTextField;\r\n    @FXML\r\n    private Button checkButton;\r\n    @FXML\r\n    private Label resultLabel;\r\n    @FXML\r\n    private Label timeLabel;\r\n\r\n\r\n    private WordGame wordGame;\r\n    private Word currentWord;\r\n    private int timeLeft;\r\n    private Timeline timeline;\r\n\r\n    @FXML\r\n    private Button exitButton;\r\n\r\n    private Stage primaryStage;\r\n\r\n    // Các phương thức và biến khác...\r\n\r\n    public void setPrimaryStage(Stage primaryStage) {\r\n        this.primaryStage = primaryStage;\r\n    }\r\n\r\n    @FXML\r\n    private void handleExitButtonAction(ActionEvent event) throws Exception {\r\n        // Logic để thoát khỏi ứng dụng\r\n//        Platform.exit();\r\n        loadScene(\"Scene4.fxml\");\r\n\r\n    }\r\n\r\n    private void loadScene(String fxmlFileName) throws Exception {\r\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/com/example/myjavafxapp/\" + fxmlFileName));\r\n        Parent root = loader.load();\r\n\r\n        // Lấy controller của scene mới và truyền primaryStage\r\n        Object controller = loader.getController();\r\n        if (controller instanceof Scene1Controller) {\r\n            ((Scene1Controller) controller).setPrimaryStage(primaryStage);\r\n        } else if (controller instanceof Scene4Controller) {\r\n            ((Scene4Controller) controller).setPrimaryStage(primaryStage);\r\n        }\r\n\r\n\r\n        Scene scene = new Scene(root);\r\n        primaryStage.setScene(scene);\r\n    }\r\n\r\n//    public void setDictionaryManagement(DictionaryManagement dictionaryManagement) {\r\n//        if (dictionaryManagement != null) {\r\n//            System.out.println(\"Đã load file\");\r\n//            wordGame = new WordGame(dictionaryManagement);\r\n//            nextWord();\r\n//        } else {\r\n//            System.err.println(\"Không thể khởi tạo WordGame với DictionaryManagement null ngay từ set\");\r\n//        }\r\n//    }\r\n\r\n    public void initialize() {\r\n        DictionaryManagement dictionaryManagement = new DictionaryManagement();\r\n        DictionaryManagement.insertFromFile(\"src/main/resources/txt/dictionaryEVplus.txt\");\r\n        wordGame = new WordGame(dictionaryManagement);\r\n        timeLeft = 50; // Đặt thời gian ban đầu là 60 giây\r\n        // Khởi tạo ToggleGroup\r\n        // Liên kết các RadioButton với ToggleGroup\r\n        optionA.setToggleGroup(answerToggleGroup);\r\n        optionB.setToggleGroup(answerToggleGroup);\r\n        optionC.setToggleGroup(answerToggleGroup);\r\n        optionD.setToggleGroup(answerToggleGroup);\r\n\r\n\r\n        optionA.setText(\"\");\r\n        optionB.setText(\"\");\r\n        optionC.setText(\"\");\r\n        optionD.setText(\"\");\r\n        startTimer();\r\n        nextWord();\r\n    }\r\n\r\n    private void startTimer() {\r\n        timeline = new Timeline();\r\n        timeline.setCycleCount(Timeline.INDEFINITE);\r\n        KeyFrame keyFrame = new KeyFrame(Duration.seconds(1), event -> {\r\n            timeLeft--;\r\n            updateTimerLabel();\r\n            if (timeLeft <= 0) {\r\n                endGame();\r\n            }\r\n        });\r\n        timeline.getKeyFrames().add(keyFrame);\r\n        timeline.play();\r\n    }\r\n\r\n    private void endGame() {\r\n        timeline.stop();\r\n        resultLabel.setText(\"Hết thời gian!\");\r\n        checkButton.setDisable(true);\r\n    }\r\n\r\n    private void updateTimerLabel() {\r\n\r\n        timeLabel.setText(\"Thời gian còn lại: \" + timeLeft + \" giây\");\r\n    }\r\n\r\n\r\n//    private void initialize() {\r\n//        // Khởi tạo game với DictionaryManagement\r\n////        wordGame = new WordGame(DictionaryCommandLine.getDictionaryManagement());\r\n////        nextWord();\r\n//        DictionaryManagement dictionaryManagement = DictionaryCommandLine.getDictionaryManagement();\r\n////        dictionaryManagement.insertFromFile(\"src/main/resources/txt/dictionaryEVplus.txt\");\r\n//        if (dictionaryManagement != null) {\r\n//            System.out.println(\"Đã load file\");\r\n//            wordGame = new WordGame(dictionaryManagement);\r\n//            nextWord();\r\n//        } else {\r\n//            // Xử lý trường hợp DictionaryManagement trả về null\r\n//            System.err.println(\"Không thể khởi tạo WordGame với DictionaryManagement null.\");\r\n//        }\r\n//    }\r\n\r\n    @FXML\r\n    private void handleCheckButtonAction() {\r\n        System.out.println(\"Người dùng  nhấn kiểm tra\");\r\n        System.out.println(wordGame);\r\n        if (timeLeft <= 0) {\r\n            // Thời gian đã hết\r\n            resultLabel.setText(\"Hết thời gian!\");\r\n            return;\r\n        }\r\n        if (currentWord == null) {\r\n            resultLabel.setText(\"Hết từ!\");\r\n            endGame();\r\n            return;\r\n        }\r\n\r\n        RadioButton selectedRadioButton = (RadioButton) answerToggleGroup.getSelectedToggle();\r\n        System.out.println(selectedRadioButton);\r\n        System.out.println(answerToggleGroup.getToggles());\r\n        if (selectedRadioButton != null) {\r\n            String userAnswer = selectedRadioButton.getText();\r\n            boolean isCorrect = wordGame.checkAnswer(currentWord.getWordTarget(), userAnswer);\r\n            if (isCorrect) {\r\n                System.out.println(\"Đáp án đúng\");\r\n                resultLabel.setText(\"Đúng!\");\r\n            } else {\r\n                System.out.println(\"Đáp án sai\");\r\n                resultLabel.setText(\"Sai! Đáp án đúng là: \" + currentWord.getWordExplain());\r\n            }\r\n            updateScore();\r\n            nextWord();\r\n        } else {\r\n            resultLabel.setText(\"Vui lòng chọn một đáp án!\");\r\n            System.out.println(\"Chưa chọn đáp án\");\r\n        }\r\n    }\r\n\r\n    //    private void nextWord() {\r\n//        currentWord = wordGame.getRandomWord();\r\n//        if (currentWord != null) {\r\n//            wordLabel.setText(currentWord.getWordTarget());\r\n//        } else {\r\n//            wordLabel.setText(\"Hết từ!\");\r\n//            // Có thể thêm logic để kết thúc trò chơi hoặc bắt đầu lại\r\n//            endGame();\r\n//        }\r\n//        answerTextField.clear();\r\n//    }\r\n    private void nextWord() {\r\n        currentWord = wordGame.getRandomWord();\r\n        if (currentWord != null) {\r\n            wordLabel.setText(currentWord.getWordTarget());\r\n\r\n            List<String> answerOptions = wordGame.generateAnswerOptions(currentWord);\r\n            // Đảm bảo rằng bạn có đủ tùy chọn để đặt vào các RadioButton\r\n            optionA.setText(answerOptions.get(0));\r\n            optionB.setText(answerOptions.get(1));\r\n            optionC.setText(answerOptions.get(2));\r\n            optionD.setText(answerOptions.get(3));\r\n        } else {\r\n            wordLabel.setText(\"Hết từ!\");\r\n            endGame();\r\n        }\r\n    }\r\n\r\n    private void updateScore() {\r\n        // Cập nhật điểm số vào resultLabel hoặc một Label khác dành cho điểm\r\n        resultLabel.setText(\"Điểm: \" + wordGame.getScore());\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/myjavafxapp/controller/WordGameController.java b/src/main/java/com/example/myjavafxapp/controller/WordGameController.java
--- a/src/main/java/com/example/myjavafxapp/controller/WordGameController.java	
+++ b/src/main/java/com/example/myjavafxapp/controller/WordGameController.java	
@@ -51,10 +51,14 @@
 
     private Stage primaryStage;
 
+    DictionaryManagement newdictionarymanagement;
+
+
     // Các phương thức và biến khác...
 
     public void setPrimaryStage(Stage primaryStage) {
         this.primaryStage = primaryStage;
+
     }
 
     @FXML
@@ -93,9 +97,8 @@
 //    }
 
     public void initialize() {
-        DictionaryManagement dictionaryManagement = new DictionaryManagement();
-        DictionaryManagement.insertFromFile("src/main/resources/txt/dictionaryEVplus.txt");
-        wordGame = new WordGame(dictionaryManagement);
+        newdictionarymanagement.insertFromFile("src/main/resources/txt/dictionaryEV.txt");
+        wordGame = new WordGame(newdictionarymanagement);
         timeLeft = 50; // Đặt thời gian ban đầu là 60 giây
         // Khởi tạo ToggleGroup
         // Liên kết các RadioButton với ToggleGroup
Index: src/main/java/com/example/myjavafxapp/model/WordGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myjavafxapp.model;\r\n\r\nimport com.example.myjavafxapp.util.DictionaryManagement;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\npublic class WordGame {\r\n    private final DictionaryManagement dictionaryManagement;\r\n    private int score;\r\n    private Random random;\r\n    private List<Word> wordList;\r\n\r\n    public WordGame(DictionaryManagement dictionaryManagement) {\r\n        this.dictionaryManagement = dictionaryManagement;\r\n        DictionaryManagement.insertFromFile(\"src/main/resources/txt/dictionaryEVplus.txt\");\r\n        this.score = 0;\r\n        this.random = new Random();\r\n        // Initialize the word list with a shuffled list of all words from the dictionary\r\n        this.wordList = dictionaryManagement.getDictionary().getAllWords();\r\n        Collections.shuffle(wordList);\r\n    }\r\n\r\n    public Word getRandomWord() {\r\n        if (!wordList.isEmpty()) {\r\n            return wordList.remove(0); // Removes and returns the first element of the list\r\n        }\r\n        return null; // or handle the case where the word list is empty\r\n    }\r\n\r\n    public boolean checkAnswer(String wordTarget, String userAnswer) {\r\n        Word word = DictionaryManagement.dictionaryLookup(wordTarget);\r\n        System.out.println(word);\r\n        if (word != null && word.getWordExplain().equalsIgnoreCase(userAnswer)) {\r\n            score++;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public int getScore() {\r\n        return score;\r\n    }\r\n\r\n    // Reset the game to play again\r\n    public void resetGame() {\r\n        score = 0;\r\n        // Reinitialize the word list and shuffle it again\r\n        wordList = dictionaryManagement.getDictionary().getAllWords();\r\n        Collections.shuffle(wordList);\r\n    }\r\n\r\n    // Use this method to start the game in your controller\r\n    public void playGame(int numberOfRounds) {\r\n        for (int round = 0; round < numberOfRounds; round++) {\r\n            Word currentWord = getRandomWord();\r\n            if (currentWord == null) {\r\n                System.out.println(\"No more words available.\");\r\n                break;\r\n            }\r\n            // Here you would ask the user for the answer and check it\r\n            // Example: String userAnswer = getUserAnswer();\r\n            // boolean isCorrect = checkAnswer(currentWord.getWordTarget(), userAnswer);\r\n        }\r\n        // At the end of the game, you can show the score\r\n        System.out.println(\"Your score is: \" + getScore());\r\n    }\r\n\r\n    public List<String> generateAnswerOptions(Word correctWord) {\r\n        List<String> options = new ArrayList<>();\r\n        options.add(correctWord.getWordExplain()); // Câu trả lời đúng\r\n\r\n        // Thêm 3 câu trả lời sai\r\n        while (options.size() < 4) {\r\n            Word randomWord = getRandomWordFromDictionary();\r\n            // Đảm bảo rằng câu trả lời sai không trùng lặp với câu trả lời đúng\r\n            if (!randomWord.getWordExplain().equalsIgnoreCase(correctWord.getWordExplain())\r\n                    && !options.contains(randomWord.getWordExplain())) {\r\n                options.add(randomWord.getWordExplain());\r\n            }\r\n        }\r\n\r\n        Collections.shuffle(options); // Xáo trộn các tùy chọn\r\n        return options;\r\n    }\r\n    private Word getRandomWordFromDictionary() {\r\n        // Phương thức này trả về một từ ngẫu nhiên từ danh sách từ vựng\r\n        // Đảm bảo rằng phương thức này không trả về null\r\n        int randomIndex = random.nextInt(wordList.size());\r\n        return wordList.get(randomIndex);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/myjavafxapp/model/WordGame.java b/src/main/java/com/example/myjavafxapp/model/WordGame.java
--- a/src/main/java/com/example/myjavafxapp/model/WordGame.java	
+++ b/src/main/java/com/example/myjavafxapp/model/WordGame.java	
@@ -8,18 +8,18 @@
 import java.util.Random;
 
 public class WordGame {
-    private final DictionaryManagement dictionaryManagement;
+    private DictionaryManagement newdictionaryManagement;
     private int score;
     private Random random;
     private List<Word> wordList;
 
     public WordGame(DictionaryManagement dictionaryManagement) {
-        this.dictionaryManagement = dictionaryManagement;
-        DictionaryManagement.insertFromFile("src/main/resources/txt/dictionaryEVplus.txt");
+        this.newdictionaryManagement = dictionaryManagement;
+
         this.score = 0;
         this.random = new Random();
         // Initialize the word list with a shuffled list of all words from the dictionary
-        this.wordList = dictionaryManagement.getDictionary().getAllWords();
+        this.wordList = newdictionaryManagement.getDictionary().getAllWords();
         Collections.shuffle(wordList);
     }
 
@@ -48,7 +48,7 @@
     public void resetGame() {
         score = 0;
         // Reinitialize the word list and shuffle it again
-        wordList = dictionaryManagement.getDictionary().getAllWords();
+        wordList = newdictionaryManagement.getDictionary().getAllWords();
         Collections.shuffle(wordList);
     }
 
Index: .idea/shelf/Uncommitted_changes_before_Update_at_17_11_2023_12_18_CH__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_17_11_2023_12_18_CH__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_17_11_2023_12_18_CH__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_17_11_2023_12_18_CH__Changes_.xml	
+++ /dev/null	
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_17_11_2023_12_18_CH_[Changes]" date="1700198300499" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_17_11_2023_12_18_CH_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 17/11/2023 12:18 CH [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_17_11_2023_12_18_CH_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_17_11_2023_12_18_CH_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_17_11_2023_12_18_CH_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_17_11_2023_12_18_CH_[Changes]/shelved.patch	
+++ /dev/null	
@@ -1,107 +0,0 @@
-Index: src/main/java/data/DictionaryManagement.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/data/DictionaryManagement.java b/src/main/java/com/example/myjavafxapp/util/DictionaryManagement.java
-rename from src/main/java/data/DictionaryManagement.java
-rename to src/main/java/com/example/myjavafxapp/util/DictionaryManagement.java
---- a/src/main/java/data/DictionaryManagement.java	(revision e99ec03556e68474f36ef5a88e6272f970e1f26a)
-+++ b/src/main/java/com/example/myjavafxapp/util/DictionaryManagement.java	(date 1700198269087)
-@@ -1,4 +1,7 @@
--package data;
-+package com.example.myjavafxapp.util;
-+
-+import data.Dictionary;
-+import data.Word;
- 
- import java.io.*;
- import java.io.FileNotFoundException;
-Index: .idea/workspace.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3e785c23-0157-440b-a9d5-01518d109878\" name=\"Changes\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2XUO44pwCNPljOwsFx98RfCCPGL\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;D:/MLDdictionary.oop&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateClassDialog.RecentsKey\">\r\n      <recent name=\"data\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"DictionaryApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.example.myjavafxapp.DictionaryApplication\" />\r\n      <module name=\"MyJavaFxApp\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.example.myjavafxapp.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.DictionaryApplication\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3e785c23-0157-440b-a9d5-01518d109878\" name=\"Changes\" comment=\"\" />\r\n      <created>1698680002179</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1698680002179</updated>\r\n      <workItem from=\"1699425948234\" duration=\"31000\" />\r\n      <workItem from=\"1699425992581\" duration=\"1651000\" />\r\n      <workItem from=\"1699687115806\" duration=\"8679000\" />\r\n      <workItem from=\"1699712231410\" duration=\"1621000\" />\r\n      <workItem from=\"1699816719847\" duration=\"99000\" />\r\n      <workItem from=\"1699868315995\" duration=\"587000\" />\r\n      <workItem from=\"1700070765026\" duration=\"2753000\" />\r\n      <workItem from=\"1700142636843\" duration=\"3892000\" />\r\n      <workItem from=\"1700181763229\" duration=\"1175000\" />\r\n      <workItem from=\"1700191826753\" duration=\"625000\" />\r\n      <workItem from=\"1700195196430\" duration=\"6000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Update file dictionary.txt and import file\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1700195716020</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1700195716020</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Update file dictionary.txt and import file\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Update file dictionary.txt and import file\" />\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/workspace.xml b/.idea/workspace.xml
---- a/.idea/workspace.xml	(revision e99ec03556e68474f36ef5a88e6272f970e1f26a)
-+++ b/.idea/workspace.xml	(date 1700198287404)
-@@ -4,7 +4,12 @@
-     <option name="autoReloadType" value="SELECTIVE" />
-   </component>
-   <component name="ChangeListManager">
--    <list default="true" id="3e785c23-0157-440b-a9d5-01518d109878" name="Changes" comment="" />
-+    <list default="true" id="3e785c23-0157-440b-a9d5-01518d109878" name="Changes" comment="">
-+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/src/main/java/data/DictionaryCommandLine.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/data/DictionaryCommandLine.java" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/src/main/java/data/DictionaryManagement.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/util/DictionaryManagement.java" afterDir="false" />
-+      <change beforePath="$PROJECT_DIR$/src/main/java/data/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/data/Game.java" afterDir="false" />
-+    </list>
-     <option name="SHOW_DIALOG" value="false" />
-     <option name="HIGHLIGHT_CONFLICTS" value="true" />
-     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-@@ -103,7 +108,15 @@
-       <option name="project" value="LOCAL" />
-       <updated>1700195716020</updated>
-     </task>
--    <option name="localTasksCounter" value="2" />
-+    <task id="LOCAL-00002" summary="upgrade file dictionaryEV">
-+      <option name="closed" value="true" />
-+      <created>1700196744156</created>
-+      <option name="number" value="00002" />
-+      <option name="presentableId" value="LOCAL-00002" />
-+      <option name="project" value="LOCAL" />
-+      <updated>1700196744156</updated>
-+    </task>
-+    <option name="localTasksCounter" value="3" />
-     <servers />
-   </component>
-   <component name="TypeScriptGeneratedFilesManager">
-@@ -111,6 +124,7 @@
-   </component>
-   <component name="VcsManagerConfiguration">
-     <MESSAGE value="Update file dictionary.txt and import file" />
--    <option name="LAST_COMMIT_MESSAGE" value="Update file dictionary.txt and import file" />
-+    <MESSAGE value="upgrade file dictionaryEV" />
-+    <option name="LAST_COMMIT_MESSAGE" value="upgrade file dictionaryEV" />
-   </component>
- </project>
-\ No newline at end of file
-Index: src/main/java/data/Game.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package data;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\nimport java.util.Scanner;\r\n\r\npublic class Game {\r\n    private final DictionaryManagement dictionaryManagement;\r\n    private final ArrayList<Word> words;\r\n    private int score;\r\n\r\n    public Game(DictionaryManagement dictionaryManagement) {\r\n        this.dictionaryManagement = dictionaryManagement;\r\n        this.words = dictionaryManagement.getDictionary().getAllWords();\r\n        this.score = 0;\r\n    }\r\n\r\n    public void playGame(int numberOfQuestions) {\r\n        for (int i = 0; i < numberOfQuestions; i++) {\r\n            int randomIndex = new Random().nextInt(words.size());\r\n            Word randomWord = words.get(randomIndex);\r\n\r\n            String[] answerOptions = generateAnswerOptions(randomWord);\r\n\r\n            System.out.println(\"Translate the following word to Vietnamese: \" + randomWord.getWordTarget());\r\n            for (int j = 0; j < answerOptions.length; j++) {\r\n                System.out.println((j + 1) + \". \" + answerOptions[j]);\r\n            }\r\n\r\n            Scanner scanner = new Scanner(System.in);\r\n            System.out.print(\"Your answer (enter the number): \");\r\n            int userChoice = scanner.nextInt();\r\n\r\n            if (isValidChoice(userChoice)) {\r\n                String userAnswer = answerOptions[userChoice - 1];\r\n                if (userAnswer.equalsIgnoreCase(randomWord.getWordExplain())) {\r\n                    System.out.println(\"Correct! Good job!\");\r\n                    score++;\r\n                } else {\r\n                    System.out.println(\"Incorrect. The correct answer is: \" + randomWord.getWordExplain());\r\n                }\r\n            } else {\r\n                System.out.println(\"Invalid choice. Please enter a number between 1 and \" + answerOptions.length);\r\n                i--; // Decrement i to repeat the current question\r\n            }\r\n        }\r\n\r\n        System.out.println(\"Game over! Your final score: \" + score);\r\n    }\r\n\r\n\r\n    private String[] generateAnswerOptions(Word correctWord) {\r\n        String[] answerOptions = new String[4];\r\n        int correctAnswerIndex = new Random().nextInt(answerOptions.length);\r\n        answerOptions[correctAnswerIndex] = correctWord.getWordExplain();\r\n\r\n        for (int i = 0; i < answerOptions.length; i++) {\r\n            if (i != correctAnswerIndex) {\r\n                int randomWordIndex = new Random().nextInt(words.size());\r\n                answerOptions[i] = words.get(randomWordIndex).getWordExplain();\r\n            }\r\n        }\r\n\r\n        return answerOptions;\r\n    }\r\n\r\n    private boolean isValidChoice(int choice) {\r\n        return choice > 0 && choice <= 4;\r\n    }\r\n\r\n    public int getScore() {\r\n        return score;\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/data/Game.java b/src/main/java/data/Game.java
---- a/src/main/java/data/Game.java	(revision e99ec03556e68474f36ef5a88e6272f970e1f26a)
-+++ b/src/main/java/data/Game.java	(date 1700198269070)
-@@ -1,5 +1,7 @@
- package data;
- 
-+import com.example.myjavafxapp.util.DictionaryManagement;
-+
- import java.util.ArrayList;
- import java.util.Random;
- import java.util.Scanner;
-Index: src/main/java/data/DictionaryCommandLine.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package data;\r\n\r\n// Press Shift twice to open the Search Everywhere dialog and type show whitespaces,\r\n// then press Enter. You can now see whitespace characters in your code.\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Comparator;\r\nimport java.util.Scanner;\r\n\r\npublic class DictionaryCommandLine {\r\n    private final DictionaryManagement dictionaryManagement;\r\n\r\n    // Hàm chạy giao diện chính\r\n    public void dictionaryAdvanced() {\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        while (true) {\r\n            System.out.println(\"Welcome to My Application!\");\r\n            System.out.println(\"[0] Exit\");\r\n            System.out.println(\"[1] Add\");\r\n            System.out.println(\"[2] Remove\");\r\n            System.out.println(\"[3] Update\");\r\n            System.out.println(\"[4] Display\");\r\n            System.out.println(\"[5] Lookup\");\r\n            System.out.println(\"[6] Search\");\r\n            System.out.println(\"[7] Game\");\r\n            System.out.println(\"[8] Import from file\");\r\n            System.out.println(\"[9] Export to file\");\r\n\r\n            System.out.print(\"Your action: \");\r\n            String userAction = scanner.nextLine();\r\n\r\n            if (userAction.matches(\"[0-9]\")) {\r\n                int action = Integer.parseInt(userAction);\r\n\r\n                switch (action) {\r\n                    case 0:\r\n                        System.out.println(\"Exiting the application.\");\r\n                        scanner.close();\r\n                        System.exit(0);\r\n                        break;\r\n                    case 1:\r\n                        // Thêm từ\r\n                        dictionaryManagement.insertFromCommandLine();\r\n                        System.out.println(\"Word added successfully!\");\r\n                        break;\r\n                    case 2:\r\n                        // Xóa từ\r\n                        removeWord();\r\n                        break;\r\n                    case 3:\r\n                        // Sửa từ\r\n                        updateWord();\r\n                        break;\r\n                    case 4:\r\n                        // Hiển thị danh sách từ\r\n                        showAllWords();\r\n                        break;\r\n                    case 5:\r\n                        // Tra cứu\r\n                        lookupWord();\r\n                        break;\r\n                    case 6:\r\n                        // Tìm kiếm\r\n                        dictionarySearcher();\r\n                        break;\r\n                    case 7:\r\n                        // Truy cập phần Game\r\n                        startGame();\r\n                        break;\r\n                    case 8:\r\n                        // Nhập danh sách từ từ tệp\r\n                        importFromFile();\r\n                        break;\r\n                    case 9:\r\n                        // Xuất dữ liệu danh sách từ ra tệp\r\n                        exportToFile();\r\n                        break;\r\n                    default:\r\n                        System.out.println(\"Action not supported. Please enter a valid number (0-9).\");\r\n                        break;\r\n                }\r\n            } else {\r\n                System.out.println(\"Action not supported. Please enter a valid number (0-9).\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Hàm khởi tạo\r\n    public DictionaryCommandLine() {\r\n        dictionaryManagement = new DictionaryManagement();\r\n    }\r\n\r\n    // Hàm hiện ra toàn bộ từ\r\n    public void showAllWords() {\r\n        ArrayList<Word> words = dictionaryManagement.getDictionary().getAllWords();\r\n        words.sort(Comparator.comparing(Word::getWordTarget));\r\n\r\n        System.out.println(\"No | English | Vietnamese\");\r\n        for (int i = 0; i < words.size(); i++) {\r\n            Word word = words.get(i);\r\n            System.out.println((i + 1) + \" | \" + word.getWordTarget() + \" | \" + word.getWordExplain());\r\n        }\r\n    }\r\n\r\n    // Hàm xóa từ\r\n    public void removeWord() {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.print(\"Enter the word to remove: \");\r\n        String wordToRemove = scanner.nextLine();\r\n\r\n        if (dictionaryManagement.removeWord(wordToRemove.trim())) {\r\n            System.out.println(\"Word removed successfully!\");\r\n        } else {\r\n            System.out.println(\"Word not found in the dictionary.\");\r\n        }\r\n    }\r\n\r\n    // Hàm sửa từ\r\n    public void updateWord() {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.print(\"Enter the word to update: \");\r\n        String wordToUpdate = scanner.nextLine();\r\n\r\n        System.out.print(\"Enter the new definition: \");\r\n        String newDefinition = scanner.nextLine();\r\n\r\n        if (dictionaryManagement.updateWord(wordToUpdate.trim(), newDefinition.trim())) {\r\n            System.out.println(\"Word updated successfully!\");\r\n        } else {\r\n            System.out.println(\"Word not found in the dictionary.\");\r\n        }\r\n    }\r\n\r\n    // Hàm check đúng từ\r\n    public void lookupWord() {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.print(\"Enter the word to look up: \");\r\n        String wordToLookup = scanner.nextLine();\r\n\r\n        Word foundWord = dictionaryManagement.dictionaryLookup(wordToLookup.trim());\r\n        if (foundWord != null) {\r\n            System.out.println(\"Definition: \" + foundWord.getWordExplain());\r\n        } else {\r\n            System.out.println(\"Word not found in the dictionary.\");\r\n        }\r\n    }\r\n\r\n    // Hàm tra từ\r\n    public void dictionarySearcher() {\r\n        System.out.print(\"Enter the search term: \");\r\n        Scanner scanner = new Scanner(System.in);;\r\n        String searchTerm = scanner.nextLine();\r\n        ArrayList<Word> matchingWords = dictionaryManagement.searchWords(searchTerm.trim());\r\n\r\n        if (!matchingWords.isEmpty()) {\r\n            System.out.println(\"Matching words:\");\r\n            for (Word word : matchingWords) {\r\n                System.out.println(\"English: \" + word.getWordTarget() + \" | Vietnamese: \" + word.getWordExplain());\r\n            }\r\n        } else {\r\n            System.out.println(\"No matching words found.\");\r\n        }\r\n\r\n    }\r\n\r\n    // Hàm nhập dữ liệu từ file\r\n    public void importFromFile(){\r\n        Scanner scanner = new Scanner(System.in);;\r\n        System.out.print(\"Enter the file path to import: \");\r\n        String importFilePath = scanner.nextLine();\r\n        dictionaryManagement.insertFromFile(importFilePath);\r\n    }\r\n\r\n    // Hàm xuất dữ liệu ra file\r\n    public void exportToFile(){\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.print(\"Enter the file path to export: \");\r\n        String exportFilePath = scanner.nextLine();\r\n        dictionaryManagement.dictionaryExportToFile(exportFilePath);\r\n    }\r\n\r\n    // Hàm chơi trò chơi\r\n\r\n    // Hàm gọi trò chơi\r\n    public void startGame() {\r\n        System.out.println(\"Welcome to the Game!\");\r\n        System.out.print(\"Choose the number of questions: \");\r\n        Scanner scanner = new Scanner(System.in);\r\n        int numberOfQuestions = scanner.nextInt();\r\n        Game game = new Game(dictionaryManagement);\r\n        game.playGame(numberOfQuestions);\r\n    }\r\n\r\n    // Chương trình chính\r\n    public static void main(String[] args) {\r\n        DictionaryCommandLine dictionaryCommandLine = new DictionaryCommandLine();\r\n        dictionaryCommandLine.dictionaryAdvanced();\r\n    }\r\n}\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/main/java/data/DictionaryCommandLine.java b/src/main/java/data/DictionaryCommandLine.java
---- a/src/main/java/data/DictionaryCommandLine.java	(revision e99ec03556e68474f36ef5a88e6272f970e1f26a)
-+++ b/src/main/java/data/DictionaryCommandLine.java	(date 1700198269078)
-@@ -3,6 +3,8 @@
- // Press Shift twice to open the Search Everywhere dialog and type show whitespaces,
- // then press Enter. You can now see whitespace characters in your code.
- 
-+import com.example.myjavafxapp.util.DictionaryManagement;
-+
- import java.util.ArrayList;
- import java.util.Comparator;
- import java.util.Scanner;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3e785c23-0157-440b-a9d5-01518d109878\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/DictionaryController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/DictionaryController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene1Controller.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene1Controller.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene2Controller.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene2Controller.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene3Controller.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene3Controller.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene4Controller.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene4Controller.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene5Controller.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene5Controller.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene6Controller.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene6Controller.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene7Controller.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene7Controller.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/WordGameController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/WordGameController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/model/DictionaryCommandLine.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/model/DictionaryCommandLine.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/model/Game.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/model/Game.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/model/WordGame.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/model/WordGame.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/sqlite/DatabaseManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/sqlite/DatabaseManager.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/util/DictionaryManagement.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/util/DictionaryManagement.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/com/example/myjavafxapp/Scene3.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/com/example/myjavafxapp/Scene3.fxml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"CodeInsightWorkspaceSettings\">\r\n    <option name=\"optimizeImportsOnTheFly\" value=\"true\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"FxmlFile\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"importingSettings\">\r\n      <MavenImportingSettings>\r\n        <option name=\"autoDetectCompiler\" value=\"false\" />\r\n      </MavenImportingSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2XUO44pwCNPljOwsFx98RfCCPGL\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;D:/Github/MLDdictionary.oop/src/main/resources/graphic/img&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;reference.settingsdialog.project.gant&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateClassDialog.RecentsKey\">\r\n      <recent name=\"data\" />\r\n    </key>\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Github\\MLDdictionary.oop\\src\\main\\resources\\graphic\\img\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"com.example.myjavafxapp\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"com.example.myjavafxapp.speech\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"DictionaryApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.example.myjavafxapp.DictionaryApplication\" />\r\n      <module name=\"MyJavaFxApp\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.example.myjavafxapp.controller.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.DictionaryApplication\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3e785c23-0157-440b-a9d5-01518d109878\" name=\"Changes\" comment=\"\" />\r\n      <created>1698680002179</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1698680002179</updated>\r\n      <workItem from=\"1699425948234\" duration=\"31000\" />\r\n      <workItem from=\"1699425992581\" duration=\"1651000\" />\r\n      <workItem from=\"1699687115806\" duration=\"8679000\" />\r\n      <workItem from=\"1699712231410\" duration=\"1621000\" />\r\n      <workItem from=\"1699816719847\" duration=\"99000\" />\r\n      <workItem from=\"1699868315995\" duration=\"587000\" />\r\n      <workItem from=\"1700070765026\" duration=\"2753000\" />\r\n      <workItem from=\"1700142636843\" duration=\"3892000\" />\r\n      <workItem from=\"1700181763229\" duration=\"1175000\" />\r\n      <workItem from=\"1700191826753\" duration=\"625000\" />\r\n      <workItem from=\"1700195196430\" duration=\"6000\" />\r\n      <workItem from=\"1700558094095\" duration=\"3272000\" />\r\n      <workItem from=\"1700573721965\" duration=\"9646000\" />\r\n      <workItem from=\"1700749038891\" duration=\"350000\" />\r\n      <workItem from=\"1700753780989\" duration=\"5719000\" />\r\n      <workItem from=\"1700761293452\" duration=\"6311000\" />\r\n      <workItem from=\"1700785785162\" duration=\"4012000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Update file dictionary.txt and import file\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1700195716020</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1700195716020</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Set up the structure of the project\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1700198667959</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1700198667959</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Update file dictionary.txt and import file\" />\r\n    <MESSAGE value=\"Set up the structure of the project\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Set up the structure of the project\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -6,21 +6,10 @@
   <component name="ChangeListManager">
     <list default="true" id="3e785c23-0157-440b-a9d5-01518d109878" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/DictionaryController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/DictionaryController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene1Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene1Controller.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene2Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene2Controller.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene3Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene3Controller.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene4Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene4Controller.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene5Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene5Controller.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene6Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene6Controller.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene7Controller.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/Scene7Controller.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/WordGameController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/controller/WordGameController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/model/DictionaryCommandLine.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/model/DictionaryCommandLine.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/model/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/model/Game.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/model/WordGame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/model/WordGame.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/sqlite/DatabaseManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/sqlite/DatabaseManager.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/util/DictionaryManagement.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/myjavafxapp/util/DictionaryManagement.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/com/example/myjavafxapp/Scene3.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/com/example/myjavafxapp/Scene3.fxml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/txt/dictionaryEVout.txt" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/txt/dictionaryEVout.txt" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -144,7 +133,9 @@
       <workItem from="1700749038891" duration="350000" />
       <workItem from="1700753780989" duration="5719000" />
       <workItem from="1700761293452" duration="6311000" />
-      <workItem from="1700785785162" duration="4012000" />
+      <workItem from="1700785785162" duration="4270000" />
+      <workItem from="1700790539071" duration="739000" />
+      <workItem from="1700791787503" duration="2099000" />
     </task>
     <task id="LOCAL-00001" summary="Update file dictionary.txt and import file">
       <option name="closed" value="true" />
